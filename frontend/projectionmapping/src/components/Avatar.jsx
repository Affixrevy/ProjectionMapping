/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/646d9dcdc8a5f5bddbfac913.glb -o src/components/Avatar.jsx -r public
*/

import {useAnimations, useFBX, useGLTF} from "@react-three/drei";
import {useFrame, useLoader} from "@react-three/fiber";
import {useControls} from "leva";
import React, {useEffect, useMemo, useRef, useState} from "react";

import * as THREE from "three";

// mapping of letters to morph target names used for rhubarb lipsyncing
const corresponding = {
    A: "viseme_PP",
    B: "viseme_kk",
    C: "viseme_I",
    D: "viseme_AA",
    E: "viseme_O",
    F: "viseme_U",
    G: "viseme_FF",
    H: "viseme_TH",
    X: "viseme_PP",
};

export function Avatar(props) {

    const [pose, setPose] = useState("t-pose (default)");

    // state vars and controls
    const {
        playAudio,
        script,
        headFollow,
        smoothMorphTarget,
        morphTargetSmoothing,
        avatarpose,
    } = useControls({
        playAudio: false,
        headFollow: true,
        smoothMorphTarget: true,
        morphTargetSmoothing: 0.5,
        script: {
            value: "welcome",
            options: ["welcome", "pizzas"],
        },
        avatarpose: {
            value: pose, // Use 'pose' from state
            onChange: (value) => setPose(value), // Update 'pose' state
            options: ["t-pose (default)", "sit"]
        }
    });

    // load audio and lipsync data based on script
    const audio = useMemo(() => new Audio(`/audios/${script}.mp3`), [script]);
    const jsonFile = useLoader(THREE.FileLoader, `audios/${script}.json`);
    const lipsync = JSON.parse(jsonFile);

    //
    useFrame(() => {
        const currentAudioTime = audio.currentTime;

        Object.values(corresponding).forEach((value) => {
            // Set morph targets to 0 if smoothing is disabled
            if (!smoothMorphTarget) {
                nodes.Wolf3D_Head.morphTargetInfluences[
                    nodes.Wolf3D_Head.morphTargetDictionary[value]
                    ] = 0;
                nodes.Wolf3D_Teeth.morphTargetInfluences[
                    nodes.Wolf3D_Teeth.morphTargetDictionary[value]
                    ] = 0;
            } else {
                // Smoothly interpolate morph targets if smoothing is enabled
                nodes.Wolf3D_Head.morphTargetInfluences[
                    nodes.Wolf3D_Head.morphTargetDictionary[value]
                    ] = THREE.MathUtils.lerp(
                    nodes.Wolf3D_Head.morphTargetInfluences[
                        nodes.Wolf3D_Head.morphTargetDictionary[value]
                        ],
                    0,
                    morphTargetSmoothing
                );

                nodes.Wolf3D_Teeth.morphTargetInfluences[
                    nodes.Wolf3D_Teeth.morphTargetDictionary[value]
                    ] = THREE.MathUtils.lerp(
                    nodes.Wolf3D_Teeth.morphTargetInfluences[
                        nodes.Wolf3D_Teeth.morphTargetDictionary[value]
                        ],
                    0,
                    morphTargetSmoothing
                );
            }
        });

        for (let i = 0; i < lipsync.mouthCues.length; i++) {
            const mouthCue = lipsync.mouthCues[i];
            if (
                currentAudioTime >= mouthCue.start &&
                currentAudioTime <= mouthCue.end
            ) {
                if (!smoothMorphTarget) {
                    nodes.Wolf3D_Head.morphTargetInfluences[
                        nodes.Wolf3D_Head.morphTargetDictionary[
                            corresponding[mouthCue.value]
                            ]
                        ] = 1;
                    nodes.Wolf3D_Teeth.morphTargetInfluences[
                        nodes.Wolf3D_Teeth.morphTargetDictionary[
                            corresponding[mouthCue.value]
                            ]
                        ] = 1;
                } else {
                    nodes.Wolf3D_Head.morphTargetInfluences[
                        nodes.Wolf3D_Head.morphTargetDictionary[
                            corresponding[mouthCue.value]
                            ]
                        ] = THREE.MathUtils.lerp(
                        nodes.Wolf3D_Head.morphTargetInfluences[
                            nodes.Wolf3D_Head.morphTargetDictionary[
                                corresponding[mouthCue.value]
                                ]
                            ],
                        1,
                        morphTargetSmoothing
                    );
                    nodes.Wolf3D_Teeth.morphTargetInfluences[
                        nodes.Wolf3D_Teeth.morphTargetDictionary[
                            corresponding[mouthCue.value]
                            ]
                        ] = THREE.MathUtils.lerp(
                        nodes.Wolf3D_Teeth.morphTargetInfluences[
                            nodes.Wolf3D_Teeth.morphTargetDictionary[
                                corresponding[mouthCue.value]
                                ]
                            ],
                        1,
                        morphTargetSmoothing
                    );
                }

                break;
            }
        }
    });

    useEffect(() => {
        nodes.Wolf3D_Head.morphTargetInfluences[
            nodes.Wolf3D_Head.morphTargetDictionary["viseme_I"]
            ] = 1;
        nodes.Wolf3D_Teeth.morphTargetInfluences[
            nodes.Wolf3D_Teeth.morphTargetDictionary["viseme_I"]
            ] = 1;
        if (playAudio) {
            audio.play();
        } else {
            audio.pause();
        }
    }, [playAudio, script]);

    // load avatar model and animations
    const {nodes, materials} = useGLTF("models/646d9dcdc8a5f5bddbfac913.glb");

    const group = useRef();

    // head follow toggle
    useFrame((state) => {
        if (headFollow) {
            group.current.getObjectByName("Head").lookAt(state.camera.position);
        }
    });

    // t-pose (default)
    // reset avatar to default pose
    // need to update with each added pose to reset rotations
    useEffect(() => {
        const leftThigh = group.current.getObjectByName("LeftUpLeg");
        const rightThigh = group.current.getObjectByName("RightUpLeg");
        const leftlowerleg = group.current.getObjectByName("LeftLeg");
        const rightlowerleg = group.current.getObjectByName("RightLeg");
        if (pose === "t-pose (default)") {
            group.current.getObjectByName("LeftUpLeg").rotation.set(Math.PI, Math.PI, 0);
            group.current.getObjectByName("RightUpLeg").rotation.set(Math.PI, Math.PI, 0);
            group.current.getObjectByName("LeftLeg").rotation.set(0, 0, 0);
            group.current.getObjectByName("RightLeg").rotation.set(0, 0, 0);
        }
    }, [pose]);

    // RightFoot
    // default quaternion is approx: x = 1, angle = 1 rad
    // useEffect(() => {
    //
    //     const targetRotation = new THREE.Quaternion();
    //     targetRotation.setFromAxisAngle(new THREE.Vector3(1, 0, 0), 1);
    //     group.current.getObjectByName("RightFoot").quaternion.copy(targetRotation);
    //
    //     console.log(nodes);
    //
    //
    // }, []);

    // sit
    useEffect(() => {
        const torso = group.current.getObjectByName("Spine");
        const leftThigh = group.current.getObjectByName("LeftUpLeg");
        const rightThigh = group.current.getObjectByName("RightUpLeg");
        const leftlowerleg = group.current.getObjectByName("LeftLeg");
        const rightlowerleg = group.current.getObjectByName("RightLeg");
        if (pose === "sit") {

            // torso.position.y -= 1;

            const thighbendangle = Math.PI / 2;
            group.current.getObjectByName("LeftUpLeg").rotation.x = thighbendangle;
            group.current.getObjectByName("RightUpLeg").rotation.x = thighbendangle;
            const kneebendangle = -Math.PI / 2;
            group.current.getObjectByName("LeftLeg").rotation.x = kneebendangle;
            group.current.getObjectByName("RightLeg").rotation.x = kneebendangle;
        }

    }, [pose]);

    // // RightArm
    // useEffect(() => {
    //     const RA = group.current.getObjectByName("RightArm");
    //     if (RA) {
    //         const targetRotation = new THREE.Quaternion();
    //         targetRotation.setFromAxisAngle(new THREE.Vector3(-1, 0, 0), Math.PI / 4);
    //         RA.quaternion.copy(targetRotation);
    //     }
    // }, []);
    //
    // // LeftArm
    // useEffect(() => {
    //     const leftArm = group.current.getObjectByName("LeftArm");
    //     if (leftArm) {
    //         const targetRotation = new THREE.Quaternion();
    //         targetRotation.setFromAxisAngle(new THREE.Vector3(0, 1, 0), 1);
    //         leftArm.quaternion.copy(targetRotation);
    //     }
    // }, []);

    return (
        <group {...props} dispose={null} ref={group}>
            <primitive object={nodes.Hips}/>
            <skinnedMesh
                geometry={nodes.Wolf3D_Body.geometry}
                material={materials.Wolf3D_Body}
                skeleton={nodes.Wolf3D_Body.skeleton}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
                material={materials.Wolf3D_Outfit_Bottom}
                skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
                material={materials.Wolf3D_Outfit_Footwear}
                skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Outfit_Top.geometry}
                material={materials.Wolf3D_Outfit_Top}
                skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Hair.geometry}
                material={materials.Wolf3D_Hair}
                skeleton={nodes.Wolf3D_Hair.skeleton}
            />
            <skinnedMesh
                name="EyeLeft"
                geometry={nodes.EyeLeft.geometry}
                material={materials.Wolf3D_Eye}
                skeleton={nodes.EyeLeft.skeleton}
                morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
                morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
            />
            <skinnedMesh
                name="EyeRight"
                geometry={nodes.EyeRight.geometry}
                material={materials.Wolf3D_Eye}
                skeleton={nodes.EyeRight.skeleton}
                morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
                morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
            />
            <skinnedMesh
                name="Wolf3D_Head"
                geometry={nodes.Wolf3D_Head.geometry}
                material={materials.Wolf3D_Skin}
                skeleton={nodes.Wolf3D_Head.skeleton}
                morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
                morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
            />
            <skinnedMesh
                name="Wolf3D_Teeth"
                geometry={nodes.Wolf3D_Teeth.geometry}
                material={materials.Wolf3D_Teeth}
                skeleton={nodes.Wolf3D_Teeth.skeleton}
                morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
                morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
            />
        </group>
    );
}

useGLTF.preload("/models/646d9dcdc8a5f5bddbfac913.glb");
